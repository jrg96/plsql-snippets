/*
 * GROUPING is a very useful for CUBRE and ROLLUP operations. CUBE and ROLLUP as part of the calculations made, fills columns
 * with NULL values. But what happens if our data used into CUBE/ROLLUP have null values?, we will get confused how to interpret
 * the NULL values.
 *
 * GROUPING is a function that returns 0 or 1. 
 *     - 0 means the row is part of our data and no generated by CUBE/ROLLUP
 *     - 1 means the row was generated by the CUBE/ROLLUP
 */
 
-- Example 1: Using grouping with 3 columns

-- As you can see, it shows which of these come from CUBE operation
SELECT 
    country_id, department_id, job_id, COUNT(*) AS emp_count,
    GROUPING(country_id) AS is_country_cube,
    GROUPING(department_id) AS is_department_cube,
    GROUPING(job_id) AS is_job_cube
FROM EMPLOYEES
JOIN DEPARTMENTS USING(department_id)
JOIN LOCATIONS USING(location_id)
WHERE department_id IS NOT NULL
GROUP BY CUBE(country_id, department_id, job_id)
ORDER BY country_id ASC;


-- Example 2: Using grouping with 2 columns, ROLLUP

-- Intentionally, we ommited the "WHERE department_id IS NOT NULL" clause, if you look closely at row 31
-- Basically is telling us we have an employee working as "SA_REP" but, the employee has no department, we now this because
-- both columns "is_department_roll", "is_job_roll" have 0 as their values, meaning that null value ies part of our data
-- and not part of our ROLLUP operation
SELECT 
    department_id, job_id, COUNT(*) AS num_employees,
    GROUPING(department_id) AS is_department_roll,
    GROUPING(job_id) AS is_job_roll
FROM EMPLOYEES
GROUP BY ROLLUP(department_id, job_id)
ORDER BY department_id;


-- Example 3: enhancing example 1, to make things even clearer

/* We can combine DECODE() function in order to make the result more readable.
 *
 * The logic of DECODE is the following:
 * DECODE(value, condition_1, action_condition_1,
 *               condition_2, action_condition_2)
 *
 * Basically if value = condition_1, it will execute action_condition_1 ... and so on for each condition till it finds
 * a condition that evaluates to TRUE
 */
SELECT 
    DECODE(GROUPING(country_id),    1, 'any country',
                                    0, nvl(to_char(country_id), 'no country')
           ) AS country, 
    DECODE(GROUPING(department_id), 1, 'any dept',
                                    0, nvl(to_char(department_id), 'no department')
           ) AS department, 
    DECODE(GROUPING(job_id),        1, 'any job',
                                    0, nvl(to_char(job_id), 'no_job')
           ) AS job, 
    COUNT(*) AS emp_count
FROM EMPLOYEES
JOIN DEPARTMENTS USING(department_id)
JOIN LOCATIONS USING(location_id)
WHERE department_id IS NOT NULL
GROUP BY CUBE(country_id, department_id, job_id)
ORDER BY country_id ASC;